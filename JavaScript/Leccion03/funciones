miFuncion(8, 2); // esto se lo conoce como HOISTING

function miFuncion(a, b) {
    //console.log("Sumamos: "+ (a+b));
    return a + b;
}

//Llamando a la función 
miFuncion(5, 4);

let resultado = miFuncion(6, 7);
console.log(resultado);

// Declaramos una función de tipo EXPRESIÓN o función anónima
let x = function (a, b) { return a + b }; // necesita cierre con punto y coma 
resultado = x(5, 6); // al llamarala se pone la variable y paréntesis
console.log(resultado);

// Funciones del tipo SELF e INVOKING
(function (a, b) {
    console.log('Ejecutando la función ' + (a + b));
})(9, 6);


console.log(typeof mifuncion);

function miFuncionDos(a, b) {
    console.log(arguments.length);
}

miFuncionDos(5, 7, 3, 6);

// toString
var miFunctionTexto = miFuncionDos.toString();
console.log(miFunctionTexto);

//Funciones Flecha
const sumarFuncionFlecha = (a, b) => a + b;
resultado = sumarFuncionFlecha(3, 7); // Asignamos el valor a una variable
console.log(resultado);

// Función tipo EXPRESIÓN
let sumar = function (a = 4, b = 8) {
    console.log(arguments[0]); // muestra el parámetro de: a
    console.log(arguments[1]); // muestra el parámetro de: b
    return a + b + arguments[2];
}
resultado = sumar(3, 2, 9);
console.log(resultado);

// Sumar todos los ARGUMENTOS
let respuesta = sumarTodo(5, 4, 13, 10, 9);
console.log(respuesta);
function sumarTodo() {
    let suma = 0;
    for (let i = 0; i < arguments.length; i++) {
        suma += arguments[i]; // arguments es para arreglos
    }
    return suma;
}

// Tipos PRIMITIVOS

let k = 10;
function cambioValor(a) { // paso por valor, la variable fue utilizada por la función y                             
    a = 20;              // luego eliminada automáticamente.
}
cambioValor(k);
console.log(k);


// paso por PERSONA

const persona = {
    nombre: "Pedro",
    apellido: "Diaz"
}
console.log(persona);
function cambioValorObjeto(p1) {
    p1.nombre = 'Nicolás';
    p1.apellido = 'Bogado';
}
cambioValorObjeto(persona);
console.log(persona);
